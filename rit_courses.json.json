import React, { useState, useMemo } from 'react';
import { ChevronDown, Plus, Trash2, Calendar, BookOpen, Award, Check } from 'lucide-react';

const App = () => {
  const coursesData = {
  "courses": [
    {
      "id": "ACCT-110",
      "courseCode": "ACCT-110",
      "title": "Financial Accounting",
      "department": "Accounting",
      "credits": 3,
      "description": "An introduction to financial reporting for corporations. Topics include the accounting cycle, financial statements, revenue recognition, and analysis of financial performance.",
      "prerequisites": [],
      "terms": ["Fall", "Spring"],
      "level": 100
    },
    {
      "id": "ACCT-210",
      "courseCode": "ACCT-210",
      "title": "Managerial Accounting",
      "department": "Accounting",
      "credits": 3,
      "description": "Introduction to the use of accounting information by managers. Explores cost accounting, budgeting, performance evaluation, and strategic decision making.",
      "prerequisites": ["ACCT-110"],
      "terms": ["Fall", "Spring"],
      "level": 200
    },
    {
      "id": "ACCT-305",
      "courseCode": "ACCT-305",
      "title": "The Accounting Profession",
      "department": "Accounting",
      "credits": 3,
      "description": "Examination of the accounting profession including ethics, professional standards, career paths, and contemporary issues facing accountants.",
      "prerequisites": ["ACCT-110"],
      "terms": ["Fall", "Spring"],
      "level": 300
    },
    {
      "id": "ACCT-360",
      "courseCode": "ACCT-360",
      "title": "Intermediate Financial Accounting I",
      "department": "Accounting",
      "credits": 3,
      "description": "In-depth study of financial reporting standards, including revenue recognition, cash and receivables, inventory, and property, plant, and equipment.",
      "prerequisites": ["ACCT-210"],
      "terms": ["Fall"],
      "level": 300
    },
    {
      "id": "ACCT-365",
      "courseCode": "ACCT-365",
      "title": "Intermediate Financial Accounting II",
      "department": "Accounting",
      "credits": 3,
      "description": "Continuation of ACCT-360 covering long-term liabilities, stockholders' equity, earnings per share, and statement of cash flows.",
      "prerequisites": ["ACCT-360"],
      "terms": ["Spring"],
      "level": 300
    },
    {
      "id": "ACCT-420",
      "courseCode": "ACCT-420",
      "title": "Personal and Small Business Taxation",
      "department": "Accounting",
      "credits": 3,
      "description": "Federal income taxation of individuals and small businesses including sole proprietorships, partnerships, and S corporations.",
      "prerequisites": ["ACCT-210"],
      "terms": ["Fall", "Spring"],
      "level": 400
    },
    {
      "id": "ACCT-430",
      "courseCode": "ACCT-430",
      "title": "Cost Accounting",
      "department": "Accounting",
      "credits": 3,
      "description": "Advanced study of cost systems, cost behavior analysis, budgeting, variance analysis, and performance measurement.",
      "prerequisites": ["ACCT-210"],
      "terms": ["Fall", "Spring"],
      "level": 400
    },
    {
      "id": "MGMT-101",
      "courseCode": "MGMT-101",
      "title": "Business 1: Introduction to Business",
      "department": "Management",
      "credits": 3,
      "description": "Introduction to business communication, planning, and analysis. Develops foundational skills for business professionals.",
      "prerequisites": [],
      "terms": ["Fall", "Spring"],
      "level": 100
    },
    {
      "id": "MGMT-102",
      "courseCode": "MGMT-102",
      "title": "Business 2: Business Planning and Professional Development",
      "department": "Management",
      "credits": 3,
      "description": "Continuation of MGMT-101 focusing on business planning, professional development, and career readiness.",
      "prerequisites": ["MGMT-101"],
      "terms": ["Fall", "Spring"],
      "level": 100
    },
    {
      "id": "MGMT-215",
      "courseCode": "MGMT-215",
      "title": "Organizational Behavior",
      "department": "Management",
      "credits": 3,
      "description": "Study of individual and group behavior in organizations. Topics include motivation, leadership, team dynamics, and organizational culture.",
      "prerequisites": [],
      "terms": ["Fall", "Spring", "Summer"],
      "level": 200
    },
    {
      "id": "MGMT-360",
      "courseCode": "MGMT-360",
      "title": "Digital Entrepreneurship",
      "department": "Management",
      "credits": 3,
      "description": "Explores entrepreneurship in the digital age, including business model innovation, lean startup methodologies, and digital venture creation.",
      "prerequisites": ["MGMT-101"],
      "terms": ["Fall", "Spring"],
      "level": 300
    },
    {
      "id": "MGMT-560",
      "courseCode": "MGMT-560",
      "title": "Strategic Management",
      "department": "Management",
      "credits": 3,
      "description": "Capstone course integrating functional areas of business. Develops skills in strategic analysis, planning, and implementation.",
      "prerequisites": ["MGMT-215", "MKTG-230", "FINC-220"],
      "terms": ["Fall", "Spring"],
      "level": 500
    },
    {
      "id": "MGIS-130",
      "courseCode": "MGIS-130",
      "title": "Information Systems & Technology",
      "department": "Management Information Systems",
      "credits": 3,
      "description": "Introduction to management information systems including systems thinking, data management, business processes, and the role of technology in organizations.",
      "prerequisites": [],
      "terms": ["Fall", "Spring"],
      "level": 100
    },
    {
      "id": "MGIS-230",
      "courseCode": "MGIS-230",
      "title": "Database Design and Applications",
      "department": "Management Information Systems",
      "credits": 3,
      "description": "Introduction to database concepts, design, and SQL. Students learn to design, implement, and query relational databases.",
      "prerequisites": ["MGIS-130"],
      "terms": ["Fall", "Spring"],
      "level": 200
    },
    {
      "id": "MGIS-340",
      "courseCode": "MGIS-340",
      "title": "Emerging Business Technologies",
      "department": "Management Information Systems",
      "credits": 3,
      "description": "Examination of cutting-edge technologies and their business applications including AI, blockchain, IoT, and cloud computing.",
      "prerequisites": ["MGIS-130"],
      "terms": ["Fall", "Spring"],
      "level": 300
    },
    {
      "id": "MGIS-360",
      "courseCode": "MGIS-360",
      "title": "Building a Web Business",
      "department": "Management Information Systems",
      "credits": 3,
      "description": "Development of e-commerce and web-based business applications. Covers web technologies, online business models, and digital marketing.",
      "prerequisites": ["MGIS-130"],
      "terms": ["Fall", "Spring"],
      "level": 300
    },
    {
      "id": "MGIS-425",
      "courseCode": "MGIS-425",
      "title": "Systems Analysis and Design",
      "department": "Management Information Systems",
      "credits": 3,
      "description": "Methods for analyzing business requirements and designing information systems. Covers SDLC, agile methodologies, and system modeling.",
      "prerequisites": ["MGIS-230"],
      "terms": ["Fall", "Spring"],
      "level": 400
    },
    {
      "id": "MKTG-230",
      "courseCode": "MKTG-230",
      "title": "Principles of Marketing",
      "department": "Marketing",
      "credits": 3,
      "description": "Introduction to marketing concepts including market research, consumer behavior, segmentation, targeting, positioning, and the marketing mix.",
      "prerequisites": [],
      "terms": ["Fall", "Spring", "Summer"],
      "level": 200
    },
    {
      "id": "MKTG-310",
      "courseCode": "MKTG-310",
      "title": "Marketing Research",
      "department": "Marketing",
      "credits": 3,
      "description": "Methods for gathering and analyzing marketing data. Covers research design, sampling, data collection, and statistical analysis.",
      "prerequisites": ["MKTG-230", "STAT-145"],
      "terms": ["Fall", "Spring"],
      "level": 300
    },
    {
      "id": "MKTG-330",
      "courseCode": "MKTG-330",
      "title": "Global Marketing",
      "department": "Marketing",
      "credits": 3,
      "description": "Marketing strategies for international markets. Covers cultural differences, global market entry, and international marketing mix decisions.",
      "prerequisites": ["MKTG-230"],
      "terms": ["Fall", "Spring"],
      "level": 300
    },
    {
      "id": "MKTG-360",
      "courseCode": "MKTG-360",
      "title": "Professional Selling",
      "department": "Marketing",
      "credits": 3,
      "description": "Development of consultative selling skills including prospecting, needs analysis, presentation techniques, and relationship management.",
      "prerequisites": ["MKTG-230"],
      "terms": ["Fall", "Spring"],
      "level": 300
    },
    {
      "id": "MKTG-370",
      "courseCode": "MKTG-370",
      "title": "Advertising & Promotion Management",
      "department": "Marketing",
      "credits": 3,
      "description": "Integrated marketing communications including advertising, public relations, sales promotion, and direct marketing strategies.",
      "prerequisites": ["MKTG-230"],
      "terms": ["Fall", "Spring"],
      "level": 300
    },
    {
      "id": "MKTG-410",
      "courseCode": "MKTG-410",
      "title": "Search Engine Marketing & Analytics",
      "department": "Marketing",
      "credits": 3,
      "description": "Digital marketing strategies focusing on SEO, SEM, web analytics, and data-driven marketing decision making.",
      "prerequisites": ["MKTG-230"],
      "terms": ["Fall", "Spring"],
      "level": 400
    },
    {
      "id": "MKTG-430",
      "courseCode": "MKTG-430",
      "title": "Social Media Marketing",
      "department": "Marketing",
      "credits": 3,
      "description": "Strategic use of social media platforms for marketing purposes. Covers content strategy, community management, and social media analytics.",
      "prerequisites": ["MKTG-230"],
      "terms": ["Fall", "Spring"],
      "level": 400
    },
    {
      "id": "MKTG-489",
      "courseCode": "MKTG-489",
      "title": "Seminar in Marketing",
      "department": "Marketing",
      "credits": 3,
      "description": "Capstone course integrating marketing concepts through case analysis, strategic planning, and applied projects.",
      "prerequisites": ["MKTG-310", "MKTG-330"],
      "terms": ["Fall", "Spring"],
      "level": 400
    },
    {
      "id": "FINC-220",
      "courseCode": "FINC-220",
      "title": "Corporate Finance",
      "department": "Finance",
      "credits": 3,
      "description": "Introduction to financial management including time value of money, capital budgeting, risk and return, and capital structure decisions.",
      "prerequisites": ["ACCT-110"],
      "terms": ["Fall", "Spring"],
      "level": 200
    },
    {
      "id": "FINC-320",
      "courseCode": "FINC-320",
      "title": "Professional Financial Management",
      "department": "Finance",
      "credits": 3,
      "description": "Advanced financial management topics including working capital management, dividend policy, and corporate restructuring.",
      "prerequisites": ["FINC-220"],
      "terms": ["Fall", "Spring"],
      "level": 300
    },
    {
      "id": "FINC-352",
      "courseCode": "FINC-352",
      "title": "Financial Management II",
      "department": "Finance",
      "credits": 3,
      "description": "Advanced corporate finance topics including mergers and acquisitions, international finance, and derivatives.",
      "prerequisites": ["FINC-220"],
      "terms": ["Fall", "Spring"],
      "level": 300
    },
    {
      "id": "FINC-362",
      "courseCode": "FINC-362",
      "title": "Intermediate Investments",
      "department": "Finance",
      "credits": 3,
      "description": "Analysis of investment vehicles including stocks, bonds, and portfolios. Covers valuation, risk management, and portfolio theory.",
      "prerequisites": ["FINC-220"],
      "terms": ["Fall", "Spring"],
      "level": 300
    },
    {
      "id": "FINC-460",
      "courseCode": "FINC-460",
      "title": "Financial Analysis and Modeling",
      "department": "Finance",
      "credits": 3,
      "description": "Development of financial models using Excel for valuation, forecasting, and decision analysis. Emphasis on practical applications.",
      "prerequisites": ["FINC-320"],
      "terms": ["Fall", "Spring"],
      "level": 400
    },
    {
      "id": "HSPT-210",
      "courseCode": "HSPT-210",
      "title": "Introduction to Hospitality Management",
      "department": "Hospitality & Tourism",
      "credits": 3,
      "description": "Overview of the hospitality industry including lodging, food service, tourism, and event management sectors.",
      "prerequisites": [],
      "terms": ["Fall", "Spring"],
      "level": 200
    },
    {
      "id": "HSPT-320",
      "courseCode": "HSPT-320",
      "title": "Hotel Operations Management",
      "department": "Hospitality & Tourism",
      "credits": 3,
      "description": "Management of hotel operations including front office, housekeeping, food and beverage, and property management systems.",
      "prerequisites": ["HSPT-210"],
      "terms": ["Fall", "Spring"],
      "level": 300
    },
    {
      "id": "HSPT-340",
      "courseCode": "HSPT-340",
      "title": "Event Planning and Management",
      "department": "Hospitality & Tourism",
      "credits": 3,
      "description": "Planning and execution of meetings, conferences, and special events. Covers budgeting, logistics, and vendor management.",
      "prerequisites": ["HSPT-210"],
      "terms": ["Fall", "Spring"],
      "level": 300
    },
    {
      "id": "STAT-145",
      "courseCode": "STAT-145",
      "title": "Introduction to Statistics I",
      "department": "Statistics",
      "credits": 3,
      "description": "Descriptive statistics, probability, sampling distributions, confidence intervals, and hypothesis testing.",
      "prerequisites": [],
      "terms": ["Fall", "Spring", "Summer"],
      "level": 100
    },
    {
      "id": "STAT-146",
      "courseCode": "STAT-146",
      "title": "Introduction to Statistics II",
      "department": "Statistics",
      "credits": 3,
      "description": "Continuation of STAT-145 covering ANOVA, regression, chi-square tests, and nonparametric methods.",
      "prerequisites": ["STAT-145"],
      "terms": ["Fall", "Spring"],
      "level": 100
    },
    {
      "id": "DECS-310",
      "courseCode": "DECS-310",
      "title": "Operations Management",
      "department": "Decision Sciences",
      "credits": 3,
      "description": "Management of operations and supply chains including process analysis, quality management, inventory control, and project management.",
      "prerequisites": ["STAT-145"],
      "terms": ["Fall", "Spring"],
      "level": 300
    },
    {
      "id": "BANA-255",
      "courseCode": "BANA-255",
      "title": "Data Literacy, Analytics, and Decision Making",
      "department": "Business Analytics",
      "credits": 3,
      "description": "Introduction to data analysis for business decisions. Covers data visualization, descriptive analytics, and business intelligence tools.",
      "prerequisites": ["STAT-145"],
      "terms": ["Fall", "Spring"],
      "level": 200
    },
    {
      "id": "INTB-225",
      "courseCode": "INTB-225",
      "title": "Global Business Environment",
      "department": "International Business",
      "credits": 3,
      "description": "Analysis of the global business environment including economic, political, cultural, and legal factors affecting international operations.",
      "prerequisites": [],
      "terms": ["Fall", "Spring"],
      "level": 200
    },
    {
      "id": "BLEG-250",
      "courseCode": "BLEG-250",
      "title": "Law, Business, and Society",
      "department": "Business Law",
      "credits": 3,
      "description": "Legal and regulatory environment of business including contracts, torts, employment law, and business ethics.",
      "prerequisites": [],
      "terms": ["Fall", "Spring"],
      "level": 200
    }
  ]
};

  const [selectedCourse, setSelectedCourse] = useState(null);
  const [schedules, setSchedules] = useState([{ id: 1, name: 'My Schedule', courses: [] }]);
  const [activeScheduleId, setActiveScheduleId] = useState(1);
  const [newScheduleName, setNewScheduleName] = useState('');
  const [showNewScheduleInput, setShowNewScheduleInput] = useState(false);
  const [menuOpen, setMenuOpen] = useState(false);
  
  const [filters, setFilters] = useState({
    department: 'All',
    level: 'All',
    credits: 'All'
  });

  const departments = ['All', ...new Set(coursesData.courses.map(c => c.department))];
  const levels = ['All', '100', '200', '300', '400', '500'];
  const creditOptions = ['All', '3'];

  const filteredCourses = useMemo(() => {
    return coursesData.courses.filter(course => {
      if (filters.department !== 'All' && course.department !== filters.department) return false;
      if (filters.level !== 'All' && !course.courseCode.includes(`-${filters.level[0]}`)) return false;
      if (filters.credits !== 'All' && course.credits !== parseInt(filters.credits)) return false;
      return true;
    });
  }, [filters]);

  const activeSchedule = schedules.find(s => s.id === activeScheduleId);

  const addToSchedule = (course) => {
    setSchedules(schedules.map(schedule => 
      schedule.id === activeScheduleId
        ? { ...schedule, courses: [...schedule.courses, course] }
        : schedule
    ));
  };

  const removeFromSchedule = (courseId) => {
    setSchedules(schedules.map(schedule =>
      schedule.id === activeScheduleId
        ? { ...schedule, courses: schedule.courses.filter(c => c.id !== courseId) }
        : schedule
    ));
  };

  const createNewSchedule = () => {
    if (newScheduleName.trim()) {
      const newId = Math.max(...schedules.map(s => s.id)) + 1;
      setSchedules([...schedules, { id: newId, name: newScheduleName, courses: [] }]);
      setNewScheduleName('');
      setShowNewScheduleInput(false);
      setActiveScheduleId(newId);
    }
  };

  const deleteSchedule = (scheduleId) => {
    if (schedules.length > 1) {
      setSchedules(schedules.filter(s => s.id !== scheduleId));
      if (activeScheduleId === scheduleId) {
        setActiveScheduleId(schedules[0].id);
      }
    }
  };

  const totalCredits = activeSchedule.courses.reduce((sum, course) => sum + course.credits, 0);

  const getDifficultyLevel = (level) => {
    if (level < 200) return 'Introductory';
    if (level < 300) return 'Intermediate';
    if (level < 400) return 'Advanced';
    return 'Expert';
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <header className="bg-gradient-to-r from-orange-600 to-orange-500 text-white shadow-lg">
        <div className="max-w-7xl mx-auto px-4 py-6">
          <div className="flex justify-between items-center">
            <div>
              <h1 className="text-3xl font-bold">RIT Course Registration</h1>
              <p className="text-orange-100 mt-1">Plan Your Academic Journey</p>
            </div>
            <button
              onClick={() => setMenuOpen(!menuOpen)}
              className="lg:hidden p-2 rounded-lg bg-orange-700 hover:bg-orange-800"
            >
              <ChevronDown className={`w-6 h-6 transition-transform ${menuOpen ? 'rotate-180' : ''}`} />
            </button>
          </div>
        </div>
      </header>

      <div className="max-w-7xl mx-auto px-4 py-6">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <div className="lg:col-span-2">
            <div className={`bg-white rounded-lg shadow-md p-6 mb-6 ${menuOpen || window.innerWidth >= 1024 ? 'block' : 'hidden lg:block'}`}>
              <h2 className="text-xl font-bold text-gray-800 mb-4 flex items-center">
                <BookOpen className="w-5 h-5 mr-2 text-orange-600" />
                Filter Courses
              </h2>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                  <label className="block text-sm font-semibold text-gray-700 mb-2">Department</label>
                  <select
                    value={filters.department}
                    onChange={(e) => setFilters({ ...filters, department: e.target.value })}
                    className="w-full px-3 py-2 border-2 border-gray-300 rounded-lg focus:border-orange-500 focus:outline-none"
                  >
                    {departments.map(dept => (
                      <option key={dept} value={dept}>{dept}</option>
                    ))}
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-semibold text-gray-700 mb-2">Course Level</label>
                  <select
                    value={filters.level}
                    onChange={(e) => setFilters({ ...filters, level: e.target.value })}
                    className="w-full px-3 py-2 border-2 border-gray-300 rounded-lg focus:border-orange-500 focus:outline-none"
                  >
                    {levels.map(level => (
                      <option key={level} value={level}>
                        {level === 'All' ? 'All Levels' : `${level} Level`}
                      </option>
                    ))}
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-semibold text-gray-700 mb-2">Credits</label>
                  <select
                    value={filters.credits}
                    onChange={(e) => setFilters({ ...filters, credits: e.target.value })}
                    className="w-full px-3 py-2 border-2 border-gray-300 rounded-lg focus:border-orange-500 focus:outline-none"
                  >
                    {creditOptions.map(credit => (
                      <option key={credit} value={credit}>
                        {credit === 'All' ? 'All Credits' : `${credit} Credits`}
                      </option>
                    ))}
                  </select>
                </div>
              </div>
            </div>

            <div className="bg-white rounded-lg shadow-md p-6">
              <h2 className="text-xl font-bold text-gray-800 mb-4">
                Available Courses ({filteredCourses.length})
              </h2>
              <div className="space-y-3 max-h-[600px] overflow-y-auto">
                {filteredCourses.map(course => (
                  <div
                    key={course.id}
                    className="border-2 border-gray-200 rounded-lg p-4 hover:border-orange-500 transition-all cursor-pointer"
                    onClick={() => setSelectedCourse(course)}
                  >
                    <div className="flex justify-between items-start">
                      <div className="flex-1">
                        <div className="flex items-center gap-2 mb-1">
                          <span className="font-bold text-orange-600">{course.courseCode}</span>
                          <span className="text-xs px-2 py-1 bg-gray-100 rounded-full text-gray-700">
                            {getDifficultyLevel(course.level)}
                          </span>
                        </div>
                        <h3 className="font-semibold text-gray-800 mb-1">{course.title}</h3>
                        <div className="flex gap-4 text-sm text-gray-600">
                          <span>{course.department}</span>
                          <span>{course.credits} Credits</span>
                        </div>
                      </div>
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          if (!activeSchedule.courses.find(c => c.id === course.id)) {
                            addToSchedule(course);
                          }
                        }}
                        disabled={activeSchedule.courses.find(c => c.id === course.id)}
                        className={`px-4 py-2 rounded-lg font-semibold flex items-center gap-2 transition-all ${
                          activeSchedule.courses.find(c => c.id === course.id)
                            ? 'bg-gray-200 text-gray-500 cursor-not-allowed'
                            : 'bg-orange-600 text-white hover:bg-orange-700'
                        }`}
                      >
                        {activeSchedule.courses.find(c => c.id === course.id) ? (
                          <>
                            <Check className="w-4 h-4" />
                            Added
                          </>
                        ) : (
                          <>
                            <Plus className="w-4 h-4" />
                            Add
                          </>
                        )}
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>

          <div className="lg:col-span-1">
            <div className="bg-white rounded-lg shadow-md p-6 sticky top-6">
              <div className="flex justify-between items-center mb-4">
                <h2 className="text-xl font-bold text-gray-800 flex items-center">
                  <Calendar className="w-5 h-5 mr-2 text-orange-600" />
                  My Schedules
                </h2>
              </div>

              <div className="mb-4">
                <div className="flex gap-2 flex-wrap mb-3">
                  {schedules.map(schedule => (
                    <div key={schedule.id} className="flex items-center gap-1">
                      <button
                        onClick={() => setActiveScheduleId(schedule.id)}
                        className={`px-3 py-1 rounded-lg font-semibold text-sm transition-all ${
                          activeScheduleId === schedule.id
                            ? 'bg-orange-600 text-white'
                            : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                        }`}
                      >
                        {schedule.name}
                      </button>
                      {schedules.length > 1 && (
                        <button
                          onClick={() => deleteSchedule(schedule.id)}
                          className="p-1 rounded bg-red-100 text-red-600 hover:bg-red-200"
                        >
                          <Trash2 className="w-3 h-3" />
                        </button>
                      )}
                    </div>
                  ))}
                </div>

                {showNewScheduleInput ? (
                  <div className="flex gap-2">
                    <input
                      type="text"
                      value={newScheduleName}
                      onChange={(e) => setNewScheduleName(e.target.value)}
                      placeholder="Schedule name"
                      className="flex-1 px-3 py-2 border-2 border-gray-300 rounded-lg focus:border-orange-500 focus:outline-none text-sm"
                      onKeyPress={(e) => e.key === 'Enter' && createNewSchedule()}
                    />
                    <button
                      onClick={createNewSchedule}
                      className="px-3 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 text-sm"
                    >
                      Create
                    </button>
                    <button
                      onClick={() => setShowNewScheduleInput(false)}
                      className="px-3 py-2 bg-gray-300 text-gray-700 rounded-lg hover:bg-gray-400 text-sm"
                    >
                      Cancel
                    </button>
                  </div>
                ) : (
                  <button
                    onClick={() => setShowNewScheduleInput(true)}
                    className="w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-semibold text-sm flex items-center justify-center gap-2"
                  >
                    <Plus className="w-4 h-4" />
                    New Schedule
                  </button>
                )}
              </div>

              <div className="bg-orange-50 border-2 border-orange-200 rounded-lg p-4 mb-4">
                <div className="flex justify-between items-center mb-2">
                  <span className="font-bold text-gray-800">Total Credits:</span>
                  <span className="text-2xl font-bold text-orange-600">{totalCredits}</span>
                </div>
                <div className="text-sm text-gray-600">
                  {activeSchedule.courses.length} course{activeSchedule.courses.length !== 1 ? 's' : ''} selected
                </div>
              </div>

              <div className="space-y-3 max-h-[500px] overflow-y-auto">
                {activeSchedule.courses.length === 0 ? (
                  <div className="text-center py-8 text-gray-500">
                    <Calendar className="w-12 h-12 mx-auto mb-2 opacity-50" />
                    <p>No courses added yet</p>
                    <p className="text-sm">Click "Add" on courses to build your schedule</p>
                  </div>
                ) : (
                  activeSchedule.courses.map(course => (
                    <div
                      key={course.id}
                      className="border-2 border-gray-200 rounded-lg p-3 hover:border-orange-400 transition-all"
                    >
                      <div className="flex justify-between items-start">
                        <div className="flex-1">
                          <div className="font-bold text-orange-600 text-sm">{course.courseCode}</div>
                          <div className="text-sm font-semibold text-gray-800 mb-1">{course.title}</div>
                          <div className="flex gap-2 text-xs text-gray-600">
                            <span>{course.credits} Credits</span>
                            <span>•</span>
                            <span>{course.terms.join(', ')}</span>
                          </div>
                        </div>
                        <button
                          onClick={() => removeFromSchedule(course.id)}
                          className="p-1 rounded bg-red-100 text-red-600 hover:bg-red-200 transition-all"
                        >
                          <Trash2 className="w-4 h-4" />
                        </button>
                      </div>
                    </div>
                  ))
                )}
              </div>
            </div>
          </div>
        </div>
      </div>

      {selectedCourse && (
        <div
          className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50"
          onClick={() => setSelectedCourse(null)}
        >
          <div
            className="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto shadow-2xl"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="bg-gradient-to-r from-orange-600 to-orange-500 text-white p-6">
              <div className="flex justify-between items-start">
                <div>
                  <div className="text-sm font-semibold mb-1">{selectedCourse.courseCode}</div>
                  <h2 className="text-2xl font-bold mb-2">{selectedCourse.title}</h2>
                  <div className="flex gap-4 text-sm">
                    <span className="flex items-center gap-1">
                      <Award className="w-4 h-4" />
                      {selectedCourse.credits} Credits
                    </span>
                    <span>{selectedCourse.department}</span>
                  </div>
                </div>
                <button
                  onClick={() => setSelectedCourse(null)}
                  className="text-white hover:bg-orange-700 rounded-lg p-2 transition-all"
                >
                  ✕
                </button>
              </div>
            </div>

            <div className="p-6">
              <div className="mb-6">
                <h3 className="font-bold text-gray-800 mb-2">Description</h3>
                <p className="text-gray-700 leading-relaxed">{selectedCourse.description}</p>
              </div>

              <div className="grid grid-cols-2 gap-4 mb-6">
                <div>
                  <h3 className="font-bold text-gray-800 mb-2">Course Level</h3>
                  <span className="inline-block px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm font-semibold">
                    {selectedCourse.level} - {getDifficultyLevel(selectedCourse.level)}
                  </span>
                </div>
                <div>
                  <h3 className="font-bold text-gray-800 mb-2">Terms Offered</h3>
                  <div className="flex gap-2">
                    {selectedCourse.terms.map(term => (
                      <span
                        key={term}
                        className="px-3 py-1 bg-green-100 text-green-800 rounded-full text-sm font-semibold"
                      >
                        {term}
                      </span>
                    ))}
                  </div>
                </div>
              </div>

              <div className="mb-6">
                <h3 className="font-bold text-gray-800 mb-2">Prerequisites</h3>
                {selectedCourse.prerequisites.length === 0 ? (
                  <p className="text-gray-600 italic">No prerequisites required</p>
                ) : (
                  <div className="space-y-2">
                    {selectedCourse.prerequisites.map(prereq => {
                      const prereqCourse = coursesData.courses.find(c => c.courseCode === prereq);
                      return (
                        <div
                          key={prereq}
                          className="flex items-center gap-2 p-3 bg-yellow-50 border border-yellow-200 rounded-lg"
                        >
                          <span className="font-semibold text-orange-600">{prereq}</span>
                          {prereqCourse && (
                            <span className="text-sm text-gray-700">- {prereqCourse.title}</span>
                          )}
                        </div>
                      );
                    })}
                  </div>
                )}
              </div>

              <button
                onClick={() => {
                  if (!activeSchedule.courses.find(c => c.id === selectedCourse.id)) {
                    addToSchedule(selectedCourse);
                    setSelectedCourse(null);
                  }
                }}
                disabled={activeSchedule.courses.find(c => c.id === selectedCourse.id)}
                className={`w-full py-3 rounded-lg font-bold text-lg flex items-center justify-center gap-2 transition-all ${
                  activeSchedule.courses.find(c => c.id === selectedCourse.id)
                    ? 'bg-gray-300 text-gray-600 cursor-not-allowed'
                    : 'bg-orange-600 text-white hover:bg-orange-700'
                }`}
              >
                {activeSchedule.courses.find(c => c.id === selectedCourse.id) ? (
                  <>
                    <Check className="w-5 h-5" />
                    Already in Schedule
                  </>
                ) : (
                  <>
                    <Plus className="w-5 h-5" />
                    Add to {activeSchedule.name}
                  </>
                )}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default App;